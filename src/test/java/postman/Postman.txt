What is postman?
	API testing tool
	Postman is a rest client/ user agent/ interface.
	Used to perform API testing with more flexibility
	
Advantage?
	Supports REST api testing
	GraphQL
	Mock servers
	Collection runner for running test repeatedly
	Support CI/CD by newman feature
Variables?
	Environment variable - for all collection with {{}}
	Global / Collection variable - for all request with {{}}
	Path variable - specific request :pathVarName
	Query parameter - specific request with key and value
GraphQL?
	Query language for API
	It is specification for fetching specific / limited values in respone
	Create personnel access token / bearer token
		Gitub -> Settings -> Developer Settings -> Generate PAT
	Add it to postman request
		Header -> Authorization - Bearer dS76SDASF87AS5FASA785ASA
	Create new API and import github public schema
		https://developer.github.com/v4/public_schema/
	Add this schema in request

Postman Modules:
Http methods - CRUD operations
URL:
	URL is a complete request which contains all inputs required
	URI / End points / resources
	protocol
	hostname
	port
	path / resource details
	path variable / param
	matrix param
	query param

Params
	query param
	path variables
	
Authorization (11):
	1. Inerit auth from parent - refer collection / parent folder
	2. No Auth - no authentication is required
	3. API Key - key-value pair and can be added as header / query param
	4. Bearer Token / JSON Web Token / JWT  - token as header (Bearer <Your API key>)
	5. Basic auth - username and password (Basic <Base64 encoded username and password>)
	6. Digest auth - two times request will be sent
		un and pwd
		un+ pwd + Number + Realm val + 401 + [un + pwd]
	7. Oauth 1.0
		Access data from thrid party API without exposing user credentials
		Referred as two-legged / three-legged auth
		Request for access token -> Return initial / temp token -> user sends auth with temp token -> SP returns access token
		Can be passed as header / url / body
		Need to pass 4 input from user
	8. Oauth 2.0
		Access token alone enough
		You can generate token from postman as well by giving client / secret ID, callback url, auth url and token url
	9. Hawk authentication
		partial cryptographic verification
		ID, Key and algorithm
	10. AWS signature
		used for aws
		custom HTTP scheme
		keyed-HMAC - Hash Message Authentication Code
	11. NTLM auth
		Username and password to be given. Domain and hostname will be taken from current PC
		Windows operating system
		standalone systems
	
Headers
	User agent
	
	Cookies
		Add, Edit, Delete, Create as jar
		Cookie as JAR
			const cookieJar = pm.cookies.jar(); // create jar
			cookieJar.set(URL, cookie name, cookie value, callback(error, cookie)); // create cookie
			cookieJar.get(URL, cookie name, callback(error, cookie)); // get the created cookie
			cookieJar.getAll(URL, callback(error, cookies)); // get the created cookies
			cookieJar.unset(URL , cookie name, callback (error)); // Delete the created cookie
			cookieJar.clear(URL, callback (error)); // delete the set cookies
	
	Content-type
		ANY - */*
		BINARY - application/octet-stream
		HTML - text/html
		JSON - application/json application/javascript text/javascript
		TEXT - text/plain
		URLENC - application/x-www-form-urlencoded
		XML - application/xml text/xml application/xhtml+xml
	
	Body
		none - no content / body
		form-data - html file - CT is multipart/form-data; boundary={boundary string}
		x-www.form.urlencoded - application/x-www-form-urlencoded
		raw
			JSON, XML, HTML, TEXT and JavaScript
			application/json, application/xml, application/html, application/text, application/javascript
		binary - binary files only
		GraphQL - application/json
		
	Content-length
	
Pre-request script
	It is also javascript which executes and send request if no errors
	
Tests
	Verify reponses
	pm.test - test cases
	pm.response - response object
	pm.expect - chai assertions
	
	Test:
		1. test description
		2. function(){};
	
	Response:
		pm.response.to.have.status(200);
		pm.response.to.not.be.error;
		pm.response.to.have.jsonBody("");
		pm.response.to.have.body("body string to search");
		pm.response.to.not.have.jsonBody("error");
		pm.response.to.have.header("headerName");
		pm.response.text();
		pm.response.json();
		pm.response.responseTime;
		pm.response.code;
		
		pm.response.to.be.ok;
		pm.response.to.be.withBody;
		pm.response.to.be.json;

	Expect:
		pm.expect("").to.include("search string");
		pm.expect([1,2,3]).to.include(2);
		pm.expect({a:1,b:2,c:3}).to.include([a:1,c:3]);
		pm.expect([1,2,3]).to.be.an('array').that.includes(2);
		pm.expect("").to.eql(100);
		pm.expect(int).to.equal(10);
		pm.expect("mani").to.be.a('string');
		pm.expect({a:1}).to.be.an('object');
		pm.expect(undefined).to.be.an('undefined');
		pm.expect("").to.be.below(200);
		pm.expect("").to.be.oneOf([201,202]);
		pm.expect("").to.be.true;
		pm.expect("").to.be.false;
		pm.expect([]).to.be.empty;
		pm.expect('').to.be.empty;
		pm.expect([]).to.be.an('array').that.is.empty;
		pm.expect("").to.have.string("partial str");
		pm.expect({a:1, b:2}).to.have.all.keys('a','b');
		pm.expect({a:1, b:2}).to.have.any.keys('a','b');
		pm.expect({a:1, b:2}).to.not.have.any.keys('c','d');
		pm.expect({a:1,b:2}).to.have.property('a');
		pm.expect({a:1,b:2}).to.be.an('object').that.has.all.keys('a','b');
		pm.expect('mani').to.have.lengthOf(3);
		pm.expect([1,2,3]).to.have.lengthOf(3);
		pm.expect([1,2,3]).to.have.numbers([2,1,3]);
		
		//validate response structure - tiny validator
		var schema = {type: int, type: boolean};
		var data = {10, true};
		pm.expect(tv4.validate(data, schema)).to.be true;
		
		//xml to json
		var jsonObject = xml2Json(responseBody);
		
		//send asynchronous request
		pm.sendRequest("req url", function(err, response){
		console.log(response.json());
		});
		
Variables:
	Gloabal variables:
		pm.globals.set("variable","value");
		pm.globals.get("variable");
		pm.globals.unset("variable");
		
	Collection Variables:
		pm.collectionVariables.set(variable:string, value:string);
		pm.collectionVariables.get(variable:string);
		pm.collectionVariables.unset(variable:string);

	Environment Variables:
		Create:
			pm.environment.set("variable","value");
			var obj = {a: 'val1', b: 'val2'}
			pm.environment.set("obj", JSON.stringify(obj));

		Read:	
			var value = pm.environment.get('variable');
			var obj = JSON.parse(pm.environment.get("obj"));

		Reset:
			pm.environment.unset("variable");
		
	Global and Env variables:
		pm.variables.get("variable");






Postman:
	Postman uses JS and Mocha framework to crate and run test
	Also, chai libs are used for assertions
	
	Chai assertions
	Have three types:
		expect
		should - calls function
		assert - not chainable
	
	Some of expect examples:
	Types:
		expect(1).to.be.a('number');
		expect('foo').to.be.a('string');
		expect([1,2,3]).to.be.a('array');
		expect({a: 1}).to.be.an('object');
		expect(null).to.be.a('null');
		
	String:
		expect('foobar').to.include('foo');
		expect('foo').to.have.lengthOf(3);
		expect('').to.be.empty;

	Number:
		expect(2).to.equal(2);
		expect(2).to.not.equal(1);
		expect(1).to.be.oneOf([1, 2, 3]);
		expect(1.5).to.be.closeTo(1, 0.5);
		expect(1.5).to.be.closeTo(2, 0.5);

	Boolean:
		expect(true).to.be.true;
		
	Arrays:
		expect([1, 2]).to.have.ordered.members([1, 2]);
		expect([1, 2, 3]).to.have.members([2, 1, 3]);
		expect([1, 2, 3]).to.be.an('array').that.includes(2);
		expect([1, 2]).to.be.an('array').that.does.not.include(3);
		expect([{a: 1}]).to.deep.include({a: 1});
		expect([1, 2, 3]).to.have.lengthOf(3);
		expect([]).to.be.an('array').that.is.empty;
		expect([]).to.be.empty;
	
	Custom error message:
		expect(1).to.be.a('string', 'nooo why fail??');
		expect(1, 'nooo why fail??').to.be.a('string');
	
	Others:
		expect({a: 1}).to.not.have.property('b');
		expect({a: 1}).to.deep.equal({a: 1});
		expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
		
	Execution order:
		Prerequsite-scripts -> Request -> Response -> Test scripts
		
	Pre-request scripts:
		Runs before your request is sent
		Three levels - Collection, Folder, Request
		
	Test scripts:
		Runs after response is received
		Three levels - Collection, Folder, Request
		
	Sandbox:
		It is javascript execution environment
		Some of the available libs - chai, tv4, pm-coll, xml2js
		And some nodejs modules - path, assert, util, url, stream
		
		pm:Object
			request and response being sent
			environment variables - set and get
		pm.sendRequest:Function
			sending HTTP/HTTPS requests asynchronously
			const echoPostRequest = {
			  url: 'https://postman-echo.com/post',
			  method: 'POST',
			  header: 'headername1:value1',
			  body: {
				mode: 'raw',
				raw: JSON.stringify({ key: 'this is json' })
			  }
			};
			pm.sendRequest(echoPostRequest, function (err, res) {
			  console.log(err ? err : res.json());
			});
			pm.sendRequest('https://postman-echo.com/get', function (err, res) {
			  if (err) { console.log(err); }
			  pm.test('response should be okay to process', function () {
				pm.expect(err).to.equal(null);
				pm.expect(res).to.have.property('code', 200);
				pm.expect(res).to.have.property('status', 'OK');
			  });
			});
	
		pm.variables
		pm.environment
		pm.collectionVariables
		pm.globals
			has, set, get
		pm.request
			pm.request.url
			pm.request.headers
			pm.request.method:String
			pm.request.body:RequestBody
			pm.request.headers.add(headerName:String):function
			pm.request.headers.remove(headerName:String):function
		pm.response
			pm.response.code:Number
			pm.response.status:String
			pm.response.headers:HeaderList
			pm.response.responseTime:Number
			pm.response.responseSize:Number
			pm.response.text():Function → String
			pm.response.json():Function → Object
		pm.cookies
		pm.cookies.jar
		pm.getData
		pm.test
		pm.expect
		pm.response.to.have.*
			pm.response.to.have.status(code:Number)
			pm.response.to.have.status(reason:String)
			pm.response.to.have.header(key:String)
			pm.response.to.have.header(key:String, optionalValue:String)
			pm.response.to.have.body()
			pm.response.to.have.body(optionalValue:String)
			pm.response.to.have.body(optionalValue:RegExp)
			pm.response.to.have.jsonBody()
			pm.response.to.have.jsonBody(optionalExpectEqual:Object)
			pm.response.to.have.jsonBody(optionalExpectPath:String)
			pm.response.to.have.jsonBody(optionalExpectPath:String, optionalValue:*)
			pm.response.to.have.jsonSchema(schema:Object)
		pm.response.to.be.*
			pm.response.to.be.info - Checks 1XX status code
			pm.response.to.be.success - Checks 2XX status code
			pm.response.to.be.redirection - Checks 3XX status code
			pm.response.to.be.clientError - Checks 4XX status code
			pm.response.to.be.serverError - Checks 5XX
			pm.response.to.be.error - Checks 4XX or 5XX
			pm.response.to.be.ok - Status code must be 200
			pm.response.to.be.accepted - Status code must be 202
			pm.response.to.be.badRequest - Status code must be 400
			pm.response.to.be.unauthorized - Status code must be 401
			pm.response.to.be.forbidden - Status code 403
			pm.response.to.be.notFound - Status code of response is checked to be 404
			pm.response.to.be.rateLimited - Checks whether response status code is 429
		Dynamic variables - starts with $
			Numbers, String - city, add, urls, amount, img, color, IP-add, phone, date, emails, files, directories, price, grammer
	
	Jenkin integration:
		Postman has JavaScript based tests, so npm needs to be installed and can be run newman test sandbox
		Install jenkin, NodeJS, NPM and newman
		Newman is written in NodeJS, so npm required to run pm collection
			npm install -g newman
			newman run jenkins_demo.postman_collection.json
	
	Parameterization with data files:
		Running same test multiple time with different data
		We can use csv or json files to pass data
		Getting data for each iteration to use in test scripts
			pm.iterationData.get("value")
		Data file:
			[{
			  "path": "post",
			  "value": "1"
			}, {
			  "path": "post",
			  "value": "2"
			}]
		Request and body:
		"url": "postman-echo.com/{{path}}"
		"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "foo",
							"value": "{{value}}",
							"type": "text",
							"enabled": true
						}
					]
				},
	Debugging:
		Runner - click on request and see what is in request and response
		Console - Select specific request from history and check request and response
	
	Branches and looping:
		It is just to send another request over current one
	
	Trash:
		Find and restore the deleted API collections
	
	Others:
	Settings
		General:
			Trim keys and values in request body
			Request Timeout in ms (0 for infinity)
			Working Directory
			Editor Font Size
			Two-pane view
			Max response size(50MB)
		Themes
		Shortcuts
			ctrl + t - new tab
			ctrl + w - close tab
			ctrl + tab - switch tab
			ctrl + 1 to 9 - switch tabs
			ctrl + shift + t - reopen closed tab
			
			Request:
			ctrl + l - url
			ctrl + s - save
			ctrl + enter - send
			ctrl + alt + enter - send and download
			
			Sidebar:
			ctrl + f - search / find
			ctrl + / - comment in body
			ctrl + d - duplicate
			
			Inteface:
			ctrl + + - zoom in
			ctrl + - - zoom out
			ctrl + 0 - reset
			ctrl + o - import
			ctrl + , - settings
			ctrl + / - shortcuts
			
		Data
			Export and import all including variables
		Add-ons
			Download newman from npm
		Certificates
		Proxy
		
	Cookies - managing cookies
	Code
		Request can be converted for different rest client and languages
		We can modify the tab spaces and new lines in settings
	
	Collection Runner:
		Running group of requests
		Can define order of execution
		Selective execution
		
	Working and sharing with teams:
		Will be useful when sharing collections with team and having more updates
		Monitor and mock collections will not be available
		
		Create a team workspace
		Add team members
		Create a collection and requests
		Create fork and make changes
		Raise Pull Request
		Add reviewers
		Review and merge
	
	Versioning an API:
		Create and manage multiple API versions
		can link collections, mocks, monitors, and documentation
		
	Mock server / collections & snapshot testing:
		Matching the complete response with the stored or previous one
			Response should exactly match the saved snapshot
				useful if your API response is static and doesn’t change often
			Response should have a snapshot as its subset
				if new properties get added to the response, it doesn’t affect your test
			Response should match the JSON Schema generated from the saved snapshot
				This strategy generates a basic schema from your save snapshot and check the validity
		Creating snapshots and mock server:
			send request and save response as example
			create them as mock server
		https://medium.com/better-practices/snapshot-testing-for-apis-using-postman-7f9f26295d6b
	
	Top level NEW:
	Create New
		request, collection, mock, monitor, environment, api and api docs
	Templates
		These templates will have set of sample requests for some app and feature of easy use
		github
		snapshot testing
		graphql
		visualizer
		oauth
		testing related templates - test api, UI, test scripts, large request
	API Network
		This will be mainly used for developer to link with someother API during their own app development
	
	Monitor collections:
		stay up to date on the health and performance of your APIs
		built-in monitoring service helps you consolidate an additional step in your API One of PM development lifecycle
		Monitors can be scheduled
	
	Share and import collections:
		Share to a workspace - sharing to another workspace
		Embed - anyone can access by clicking 'Run in Postman' button (API documentation)
		Get public link - anyone can access by using this link
	
	Adding comments and examples
		Comments - will help to collabrate with team members
		Examples - it's response copy to use it in mock server / snapshot
	
	Capture request and cookies:
		Request and cookies can be captured automatically
		It needs interceptor and interceptor bridge
		Interceptor will capture request and cookies from browser
		Interceptor bridge will enable communication to interceptor
		Proxy to be enabled and port should be same in PM and browser
	
	Postman integration with github:
		Save pm collections in github
		it requires PAT and Webhooks settings
